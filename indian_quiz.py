import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from educhain import Educhain, LLMConfig

# Initialize Gemini model
def init_llm():
    gemini = ChatGoogleGenerativeAI(
        model="gemini-2.0-flash",
        google_api_key=st.secrets["GOOGLE_API_KEY"]
    )
    gemini_config = LLMConfig(custom_model=gemini)
    return Educhain(gemini_config)

# Language prompt templates
LANGUAGE_TEMPLATES = {
    "Telugu": """
р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л {num} р░мр░╣р▒Бр░│р▒Ир░Ър▒Нр░Ыр░┐р░Х р░кр▒Нр░░р░╢р▒Нр░ир░▓р░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░Вр░бр░┐.
р░Ер░Вр░╢р░В: {topic}

р░кр▒Нр░░р░др░┐ р░кр▒Нр░░р░╢р▒Нр░ир░Хр▒Б:
1. р░кр▒Нр░░р░╢р▒Нр░и
2. р░ир░╛р░▓р▒Бр░Чр▒Б р░╕р░ор░╛р░зр░╛р░и р░Ор░Вр░кр░┐р░Хр░▓р▒Б (р░О, р░мр░┐, р░╕р░┐, р░бр░┐)
3. р░╕р░░р▒Ир░и р░╕р░ор░╛р░зр░╛р░ир░В
4. р░╡р░┐р░╡р░░р░г
    """,
    
    "Hindi": """
рд╣рд┐рдВрджреА рдореЗрдВ {num} рдмрд╣реБрд╡рд┐рдХрд▓реНрдкреАрдп рдкреНрд░рд╢реНрди рдмрдирд╛рдПрдВред
рд╡рд┐рд╖рдп: {topic}

рдкреНрд░рддреНрдпреЗрдХ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП:
1. рдкреНрд░рд╢реНрди
2. рдЪрд╛рд░ рд╡рд┐рдХрд▓реНрдк (рдХ, рдЦ, рдЧ, рдШ)
3. рд╕рд╣реА рдЙрддреНрддрд░
4. рд╡реНрдпрд╛рдЦреНрдпрд╛
    """,
    
    "Tamil": """
родрооро┐ро┤ро┐ро▓рпН {num} рокро▓рпНродрпЗро░рпНро╡рпБ ро╡ро┐ройро╛роХрпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН.
родро▓рпИрокрпНрокрпБ: {topic}

роТро╡рпНро╡рпКро░рпБ роХрпЗро│рпНро╡ро┐роХрпНроХрпБроорпН:
1. роХрпЗро│рпНро╡ро┐
2. роиро╛ройрпНроХрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН (роЕ, роЖ, роЗ, роИ)
3. роЪро░ро┐ропро╛рой рокродро┐ро▓рпН
4. ро╡ро┐ро│роХрпНроХроорпН
    """,
    
    "Kannada": """
р▓Хр▓ир│Нр▓ир▓бр▓жр▓▓р│Нр▓▓р▓┐ {num} р▓мр▓╣р│Б р▓Жр▓пр│Нр▓Хр│Ж р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓░р▓Ър▓┐р▓╕р▓┐.
р▓╡р▓┐р▓╖р▓п: {topic}

р▓кр│Нр▓░р▓др▓┐ р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр│Ж:
1. р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж
2. р▓ир▓╛р▓▓р│Нр▓Хр│Б р▓Жр▓пр│Нр▓Хр│Жр▓Чр▓│р│Б (р▓О, р▓мр▓┐, р▓╕р▓┐, р▓бр▓┐)
3. р▓╕р▓░р▓┐р▓пр▓╛р▓ж р▓Йр▓др│Нр▓др▓░
4. р▓╡р▓┐р▓╡р▓░р▓гр│Ж
    """,
    
    "Malayalam": """
р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ {num} р┤мр┤╣р╡Бр┤╡р┤░р┤г р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.
р┤╡р┤┐р┤╖р┤пр┤В: {topic}

р┤Ур┤░р╡Л р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др┤┐р┤ир╡Бр┤В:
1. р┤Ър╡Лр┤жр╡Нр┤пр┤В
2. р┤ир┤╛р┤▓р╡Н р┤Ур┤кр╡Нр┤╖р┤ир╡Бр┤Хр╡╛ (р┤О, р┤мр┤┐, р┤╕р┤┐, р┤бр┤┐)
3. р┤╢р┤░р┤┐р┤пр┤╛р┤п р┤Йр┤др╡Нр┤др┤░р┤В
4. р┤╡р┤┐р┤╢р┤жр╡Ар┤Хр┤░р┤гр┤В
    """,
    
    "Bengali": """
ржмрж╛ржВрж▓рж╛ржпрж╝ {num} ржЯрж┐ ржмрж╣рзБржирж┐рж░рзНржмрж╛ржЪржирзА ржкрзНрж░рж╢рзНржи рждрзИрж░рж┐ ржХрж░рзБржиред
ржмрж┐рж╖ржпрж╝: {topic}

ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп:
1. ржкрзНрж░рж╢рзНржи
2. ржЪрж╛рж░ржЯрж┐ ржмрж┐ржХрж▓рзНржк (ржХ, ржЦ, ржЧ, ржШ)
3. рж╕ржарж┐ржХ ржЙрждрзНрждрж░
4. ржмрзНржпрж╛ржЦрзНржпрж╛
    """
}

# Streamlit UI
st.title("ЁЯОп Indian Languages Quiz Generator")
st.write("Generate quiz questions in various Indian languages!")

# Sidebar for inputs
with st.sidebar:
    st.header("Quiz Settings")
    language = st.selectbox(
        "Select Language",
        options=list(LANGUAGE_TEMPLATES.keys()),
        index=0
    )
    
    topic = st.text_input("Enter Topic", "Indian History")
    num_questions = st.slider("Number of Questions", 5, 20, 10)
    
    st.markdown("---")
    st.markdown("### Topics Suggestions:")
    st.markdown("""
    - Indian History
    - Geography
    - Science & Technology
    - Indian Culture
    - Sports
    - Current Affairs
    """)

# Main content
if st.button("Generate Quiz"):
    with st.spinner(f"Generating {num_questions} questions in {language}..."):
        try:
            client = init_llm()
            
            # Generate questions using the selected language template
            questions = client.qna_engine.generate_questions(
                topic=topic,
                num=num_questions,
                prompt_template=LANGUAGE_TEMPLATES[language]
            )
            
            # Display questions
            st.success("тЬЕ Quiz generated successfully!")
            st.markdown("---")
            
            # Create tabs for Questions and Answer Key
            q_tab, a_tab = st.tabs(["Questions", "Answer Key"])
            
            with q_tab:
                for i, q in enumerate(questions.questions, 1):
                    st.markdown(f"### Question {i}")
                    st.write(q.question)
                    
                    # Display options in columns
                    cols = st.columns(2)
                    for j, option in enumerate(q.options):
                        with cols[j//2]:
                            st.write(option)
                    
                    st.markdown("---")
            
            with a_tab:
                for i, q in enumerate(questions.questions, 1):
                    st.markdown(f"### Question {i} - Answer")
                    st.write(f"**Correct Answer:** {q.answer}")
                    st.write(f"**Explanation:** {q.explanation}")
                    st.markdown("---")

        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
            st.info("Please try again or check your API key configuration.")

# Footer
st.markdown("---")
st.markdown("Made with тЭдя╕П using Educhain and Gemini")